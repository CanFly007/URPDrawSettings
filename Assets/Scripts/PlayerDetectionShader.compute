#pragma kernel CSMain

// The render texture that will be analyzed.
Texture2D<float4> InputTexture;

// The buffer to store pixel counts for each player.
// The length of this buffer should match the number of players.
RWStructuredBuffer<int> PlayerPixelCounts;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Calculate the texture coordinate.
    uint2 texCoord = id.xy;

    // Read the pixel color from the input texture.
    float4 pixelColor = InputTexture.Load(int3(texCoord, 0));

    int playerIndex = -1;
    bool isRed = pixelColor.r == 1 && pixelColor.g == 0 && pixelColor.b == 0;
    bool isGreen = pixelColor.r == 0 && pixelColor.g == 1 && pixelColor.b == 0;
    bool isBlue = pixelColor.r == 0 && pixelColor.g == 0 && pixelColor.b == 1;
    bool isYellow = pixelColor.r == 1 && pixelColor.g == 1 && pixelColor.b == 0;
    bool isMagenta = pixelColor.r == 1 && pixelColor.g == 0 && pixelColor.b == 1;
    bool isCyan = pixelColor.r == 0 && pixelColor.g == 1 && pixelColor.b == 1;

    //if (isRed) playerIndex = 0;
    //else if (isGreen) playerIndex = 1;

    //// If the pixelColor matches one of the player colors,
    //// increment the corresponding pixel count.
    //if (playerIndex >= 0 && playerIndex < NUM_PLAYERS)
    //{
    //    InterlockedAdd(PlayerPixelCounts[playerIndex], 1);
    //}

    //if (isRed) InterlockedAdd(PlayerPixelCounts[0], 1);
    //else if (isGreen) InterlockedAdd(PlayerPixelCounts[1], 1);

    if (all(pixelColor.rgb == float3(1, 0, 0))) // 红色
    {
        InterlockedAdd(PlayerPixelCounts[0], 1);
    }
    else if (all(pixelColor.rgb == float3(0, 1, 0))) // 绿色
    {
        InterlockedAdd(PlayerPixelCounts[1], 1);
    }
}